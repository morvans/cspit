// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Endpoint {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  token      String      @unique @default(cuid())
  label      String
  cspReports CspReport[]
  reports    Report[]
  
  @@map("endpoints")
}

model CspReport {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  documentUri           String
  referrer              String?
  violatedDirective     String
  effectiveDirective    String
  originalPolicy        String
  disposition           String
  blockedUri            String?
  lineNumber            Int?
  columnNumber          Int?
  sourceFile            String?
  statusCode            Int?
  scriptSample          String?
  userAgent             String?
  rawReport             String   // Store the complete raw CSP report for debugging
  timestamp             DateTime @default(now())
  
  endpoint   Endpoint @relation(fields: [endpointId], references: [id])
  endpointId String   @db.ObjectId
  
  @@map("csp_reports")
}

// Generic Report model for all Reporting API report types
model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // Report type (e.g., "csp-violation", "deprecation", "intervention")
  url       String   // URL where the report was generated
  userAgent String?  // User agent of the client
  body      Json?    // Flexible JSON field to store the report body
  age       Int?     // Age of the report in milliseconds (from Reporting API)
  timestamp DateTime @default(now())
  
  endpoint   Endpoint @relation(fields: [endpointId], references: [id])
  endpointId String   @db.ObjectId
  
  @@map("reports")
}

// NextAuth.js models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
